name: Documentation

on:
  push:
    branches: [main]
    paths:
      - '**.md'
      - 'src/**'
      - 'docs/**'
      - 'playground.html'
      - 'dist/browser/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

permissions:
  contents: write  # Need write permission to push to gh-pages branch
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Clear npm cache (fix for Rollup native deps issue)
        run: npm cache clean --force
      
      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
      
      - name: Build project
        run: npm run build
      
      - name: Install documentation tools
        run: npm install --save-dev typedoc typedoc-plugin-markdown @microsoft/api-extractor @microsoft/api-documenter
      
      - name: Generate API documentation
        run: |
          npx typedoc src/index.ts \
            --out docs/api \
            --readme README.md \
            --name "Wang Language" \
            --includeVersion \
            --excludePrivate \
            --excludeInternal \
            --plugin typedoc-plugin-markdown
      
      - name: Generate language reference
        run: |
          mkdir -p docs/reference
          node scripts/generate-docs.js || echo "No docs script found, skipping"
      
      - name: Copy additional documentation
        run: |
          cp README.md docs/index.md
          cp CLAUDE.md docs/development.md || echo "No CLAUDE.md found"
          
          # Copy playground and browser bundle
          cp playground.html docs/playground.html
          mkdir -p docs/dist/browser
          cp -r dist/browser/* docs/dist/browser/ || echo "Browser bundle not found"
          
          # Create main index with links to both playground and docs
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Wang Language</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 0;
              }
              .container {
                text-align: center;
                color: white;
              }
              h1 {
                font-size: 4em;
                margin-bottom: 0.2em;
              }
              p {
                font-size: 1.5em;
                margin-bottom: 2em;
                opacity: 0.9;
              }
              .buttons {
                display: flex;
                gap: 20px;
                justify-content: center;
              }
              a {
                display: inline-block;
                padding: 15px 40px;
                background: white;
                color: #667eea;
                text-decoration: none;
                border-radius: 50px;
                font-size: 1.2em;
                font-weight: bold;
                transition: transform 0.3s, box-shadow 0.3s;
              }
              a:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>ðŸš€ Wang Language</h1>
              <p>CSP-Safe Workflow Programming Language</p>
              <div class="buttons">
                <a href="playground.html">Try Playground</a>
                <a href="docs.html">Read Documentation</a>
              </div>
            </div>
          </body>
          </html>
          EOF
          
          # Create a simple documentation page
          cat > docs/docs.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Wang Language Documentation</title>
            <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                line-height: 1.6;
                color: #333;
                background: #f5f5f5;
              }
              .header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 2rem;
                text-align: center;
              }
              .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 2rem;
              }
              .content {
                background: white;
                border-radius: 8px;
                padding: 2rem;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
              }
              h1 { font-size: 2.5rem; margin-bottom: 1rem; }
              h2 { color: #667eea; margin: 2rem 0 1rem; }
              h3 { color: #764ba2; margin: 1.5rem 0 0.5rem; }
              pre {
                background: #f8f8f8;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 1rem;
                overflow-x: auto;
                margin: 1rem 0;
              }
              code {
                background: #f0f0f0;
                padding: 0.2rem 0.4rem;
                border-radius: 3px;
                font-family: 'Monaco', 'Menlo', monospace;
              }
              .section { margin: 2rem 0; }
              .feature-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 2rem;
                margin: 2rem 0;
              }
              .feature {
                padding: 1.5rem;
                background: #f9f9f9;
                border-radius: 8px;
                border-left: 4px solid #667eea;
              }
              .links {
                display: flex;
                gap: 2rem;
                margin: 2rem 0;
              }
              .links a {
                color: #667eea;
                text-decoration: none;
                font-weight: bold;
              }
              .links a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>ðŸš€ Wang Language</h1>
              <p>CSP-Safe Workflow Programming Language for Browser Automation</p>
            </div>
            
            <div class="container">
              <div class="content">
                <div class="links">
                  <a href="playground.html">Try Playground</a>
                  <a href="https://github.com/artpar/wang">GitHub</a>
                  <a href="https://www.npmjs.com/package/wang-lang">NPM</a>
                  <a href="index.html">Home</a>
                </div>
                
                <section class="section">
                  <h2>Overview</h2>
                  <p>Wang is a modern workflow programming language that runs inside JavaScript, designed for browser automation and data transformation. It's CSP-safe (no eval/new Function) and can run in restricted environments like Chrome service workers.</p>
                </section>
                
                <section class="section">
                  <h2>Key Features</h2>
                  <div class="feature-grid">
                    <div class="feature">
                      <h3>ðŸ”’ CSP-Safe</h3>
                      <p>No eval() or new Function() usage. Safe for Chrome service workers and restricted browser contexts.</p>
                    </div>
                    <div class="feature">
                      <h3>ðŸš€ Modern Syntax</h3>
                      <p>JavaScript-like syntax with pipeline operators (|> and ->), async/await, classes, and modules.</p>
                    </div>
                    <div class="feature">
                      <h3>ðŸ“¦ Module System</h3>
                      <p>Full ES6-style module system with named imports/exports and pluggable resolvers.</p>
                    </div>
                    <div class="feature">
                      <h3>ðŸŽ¯ Browser Automation</h3>
                      <p>Designed for web scraping, LinkedIn automation, and browser workflow automation.</p>
                    </div>
                  </div>
                </section>
                
                <section class="section">
                  <h2>Quick Start</h2>
                  <h3>Installation</h3>
                  <pre><code>npm install wang-lang</code></pre>
                  
                  <h3>Basic Usage</h3>
                  <pre><code>import { WangInterpreter, InMemoryModuleResolver } from 'wang-lang';

// Create interpreter
const resolver = new InMemoryModuleResolver();
const interpreter = new WangInterpreter({
  moduleResolver: resolver,
  functions: {
    log: console.log,
    querySelector: (s) => document.querySelector(s)
  }
});

// Execute Wang code
await interpreter.execute(\`
  let greeting = "Hello, Wang!"
  log(greeting)
  
  let profiles = querySelectorAll(".profile")
  profiles |> filter(_, active) |> log
\`);</code></pre>
                </section>
                
                <section class="section">
                  <h2>Language Syntax</h2>
                  
                  <h3>Variables</h3>
                  <pre><code>let name = "Wang"
const version = "0.14"
var count = 0</code></pre>
                  
                  <h3>Pipeline Operators</h3>
                  <pre><code>// Pipe operator |>
let result = data 
  |> filter(_, x => x > 5)
  |> map(_, x => x * 2)
  
// Arrow operator ->
data -> forEach(_, log)</code></pre>
                  
                  <h3>Classes</h3>
                  <pre><code>class Workflow {
  constructor(name) {
    this.name = name
  }
  
  async process(data) {
    return data |> transform |> save
  }
}</code></pre>
                  
                  <h3>Modules</h3>
                  <pre><code>// Import
import { processData } from "./processor.wang"

// Export
export function transform(data) {
  return data |> normalize |> validate
}</code></pre>
                </section>
                
                <section class="section">
                  <h2>API Reference</h2>
                  <h3>WangInterpreter</h3>
                  <p>Main interpreter class for executing Wang code.</p>
                  <pre><code>const interpreter = new WangInterpreter({
  moduleResolver: resolver,  // Module resolver instance
  functions: {},             // JavaScript functions to expose
  variables: {}              // Initial variables
});</code></pre>
                  
                  <h3>InMemoryModuleResolver</h3>
                  <p>Module resolver that stores modules in memory.</p>
                  <pre><code>const resolver = new InMemoryModuleResolver();
resolver.addModule("myModule", moduleCode);</code></pre>
                  
                  <h3>WangValidator</h3>
                  <p>Validates Wang code without executing it.</p>
                  <pre><code>const validator = new WangValidator();
const result = validator.validate(code);
if (result.valid) {
  console.log("Valid Wang code!");
}</code></pre>
                </section>
                
                <section class="section">
                  <h2>Resources</h2>
                  <ul>
                    <li><a href="https://github.com/artpar/wang">GitHub Repository</a></li>
                    <li><a href="https://www.npmjs.com/package/wang-lang">NPM Package</a></li>
                    <li><a href="playground.html">Interactive Playground</a></li>
                    <li><a href="https://github.com/artpar/wang/issues">Report Issues</a></li>
                  </ul>
                </section>
              </div>
            </div>
          </body>
          </html>
          EOF
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: false