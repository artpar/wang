name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v0.2.1, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Clear npm cache (fix for Rollup native deps issue)
        run: npm cache clean --force
      
      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
      
      - name: Run tests
        run: |
          npm run build:grammar
          npm test
      
      - name: Build project
        run: npm run build
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Triggered by tag push - extract version from tag
            TAG="${{ github.ref_name }}"
            VERSION=${TAG#v}  # Remove 'v' prefix
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "is_tag_release=true" >> $GITHUB_OUTPUT
            echo "Version from tag: $VERSION"
            
            # Update package.json to match tag version
            npm version "$VERSION" --no-git-tag-version --allow-same-version
          else
            # Triggered by manual dispatch - bump version
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
            VERSION=$(node -p "require('./package.json').version")
            TAG="v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "is_tag_release=false" >> $GITHUB_OUTPUT
            echo "New version: $VERSION"
          fi
      
      - name: Update CHANGELOG
        run: |
          cat > CHANGELOG_NEW.md << 'EOF'
          # Changelog
          
          ## [${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)
          
          ### Changes
          EOF
          
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD >> CHANGELOG_NEW.md
          
          echo "" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          if [ -f CHANGELOG.md ]; then
            tail -n +2 CHANGELOG.md >> CHANGELOG_NEW.md
          fi
          
          mv CHANGELOG_NEW.md CHANGELOG.md
      
      - name: Commit and tag (manual release only)
        if: steps.version.outputs.is_tag_release == 'false'
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: release ${{ steps.version.outputs.tag }}"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
          git push origin main
          git push origin "${{ steps.version.outputs.tag }}"
      
      - name: Generate release notes
        id: release-notes  
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"
          
          cat > release_notes.md << EOF
          # Wang Language $VERSION
          
          A CSP-safe workflow programming language for browser automation.
          
          ## üöÄ Features
          
          - ‚úÖ **100% CSP-Safe** - No eval() or new Function()
          - üéØ **Zero Ambiguity Grammar** - Deterministic parsing  
          - üì¶ **Modern JavaScript-like Syntax** - Classes, modules, async/await
          - üîå **Pluggable Module System** - Memory, IndexedDB, HTTP resolvers
          - üöÄ **Pipeline Operators** - Elegant data flow with \`|>\` and \`->\`
          - üß™ **100% Test Coverage** - 90/90 tests passing
          
          ## üì¶ Installation
          
          \`\`\`bash
          npm install wang-lang@$VERSION
          \`\`\`
          
          ## üåê Browser CDN
          
          \`\`\`html
          <script src="https://unpkg.com/wang-lang@$VERSION/dist/browser/wang.min.js"></script>
          \`\`\`
          
          ## üìã Changes
          EOF
          
          # Add changelog content
          if [ -f CHANGELOG.md ]; then
            echo "" >> release_notes.md
            head -n 50 CHANGELOG.md >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "ü§ñ *This release was automatically generated.*" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Wang Language ${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || 'false' }}
          files: |
            dist/browser/wang.min.js
            dist/browser/wang.min.js.map
            dist/esm/index.js
            dist/cjs/index.cjs
      
      - name: Publish to npm
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "üöÄ Publishing wang-lang@$VERSION to npm..."
          
          # Verify package contents before publishing
          echo "üì¶ Package contents:"
          npm pack --dry-run
          
          # Check if this version already exists on npm
          if npm view "wang-lang@$VERSION" version >/dev/null 2>&1; then
            echo "‚ùå Version $VERSION already exists on npm, skipping publish"
            exit 0
          fi
          
          # Publish based on prerelease flag
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            echo "Publishing as prerelease with beta tag..."
            npm publish --access public --tag beta
          else
            echo "Publishing as stable release..."
            npm publish --access public
          fi
          
          echo "‚úÖ Successfully published wang-lang@$VERSION to npm!"
          
          # Wait for npm to propagate
          sleep 10
          
          # Verify the publish
          PUBLISHED_VERSION=$(npm view wang-lang version 2>/dev/null || echo "")
          if [ "$PUBLISHED_VERSION" = "$VERSION" ]; then
            echo "‚úÖ Verification successful: wang-lang@$VERSION is available"
          else
            echo "‚ö†Ô∏è  Verification: Expected $VERSION, npm shows $PUBLISHED_VERSION"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Update documentation
        run: |
          npm run docs || echo "No docs script"
          
      - name: Deploy docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: false
        continue-on-error: true
      
      - name: Release Summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"
          
          echo "üéâ Release $TAG completed successfully!"
          echo ""
          echo "üìã Release Information:"
          echo "  ‚Ä¢ Version: $VERSION"
          echo "  ‚Ä¢ Tag: $TAG" 
          echo "  ‚Ä¢ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/$TAG"
          echo "  ‚Ä¢ npm Package: https://www.npmjs.com/package/wang-lang/v/$VERSION"
          echo "  ‚Ä¢ CDN: https://unpkg.com/wang-lang@$VERSION/dist/browser/wang.min.js"
          echo ""
          echo "üöÄ Quick Install:"
          echo "  npm install wang-lang@$VERSION"
          echo ""
          echo "üìö Documentation:"
          echo "  https://artpar.github.io/wang"