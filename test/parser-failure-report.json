{
  "timestamp": "2025-08-29T12:54:00.413Z",
  "summary": {
    "total": 13,
    "passed": 0,
    "failed": 13,
    "successRate": "0%"
  },
  "failures": [
    {
      "name": "Simple property access",
      "code": "let obj = {a: 1}\nlet val = obj.a",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Property access in string concatenation",
      "code": "let obj = {name: \"test\"}\nlet str = \"Name: \" + obj.name",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Property access in object literal",
      "code": "let arr = [1, 2, 3]\nlet obj = {\n  count: arr.length\n}",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Arrow function with property access in body",
      "code": "let item = {title: \"test\"}\nlet fn = x => x.title",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Arrow function block with property access",
      "code": "let fn = (story) => {\n  return story.title\n}",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Map with arrow and property access",
      "code": "let stories = [{title: \"a\"}]\nlet result = map(stories, story => story.title)",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Map with arrow block and property access",
      "code": "let stories = [{title: \"a\"}]\nlet result = map(stories, (story, index) => {\n  return story.title\n})",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Console.log with property access",
      "code": "let report = {count: 5}\nconsole.log(\"Count: \" + report.count)",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Multi-line boolean expression",
      "code": "let a = 1\nlet b = 2\nlet c = 3\nlet result = (a !== b) &&\n             (b !== c)",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Method call on array",
      "code": "let arr = [1, 2, 3]\nlet str = arr.join(\", \")",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Chained property access",
      "code": "let obj = {a: {b: {c: 1}}}\nlet val = obj.a.b.c",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Property access in ternary",
      "code": "let obj = {val: 5}\nlet result = obj ? obj.val : 0",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    },
    {
      "name": "Complex ternary with chained access",
      "code": "let tabs = {items: [{url: \"test\"}]}\nlet url = tabs && tabs.items && tabs.items[0] ? tabs.items[0].url : \"\"",
      "errors": [
        "Cannot read properties of undefined (reading 'forEach')"
      ],
      "possibleCause": [
        "Unknown parsing issue"
      ]
    }
  ]
}