// Testing specific user-reported failures
console.log("=== USER REPORTED FAILURES ===")

// Test 1: Arrow in map with index
console.log("\n1. Arrow with map and index:")
let nums = [1, 2, 3]
try {
    let result = map(nums, (val, idx) => val + idx)
    console.log("SUCCESS: " + result)
} catch (e) {
    console.log("FAILED: " + e)
}

// Test 2: Object with property access
console.log("\n2. Object with .length property:")
let stories = [1, 2, 3]
try {
    let report = {
        count: stories.length
    }
    console.log("SUCCESS: object created")
} catch (e) {
    console.log("FAILED: " + e)
}

// Test 3: new Promise
console.log("\n3. new Promise:")
try {
    let p = new Promise(resolve => resolve("done"))
    console.log("SUCCESS: Promise created")
} catch (e) {
    console.log("FAILED: " + e)
}

// Test 4: Array.slice
console.log("\n4. Array.slice:")
let arr = [1, 2, 3, 4, 5]
try {
    let sliced = arr.slice(0, 3)
    console.log("SUCCESS: " + sliced)
} catch (e) {
    console.log("FAILED: " + e)
}

// Test 5: Array.join
console.log("\n5. Array.join:")
try {
    let joined = arr.join(", ")
    console.log("SUCCESS: " + joined)
} catch (e) {
    console.log("FAILED: " + e)
}

// Test 6: Property in console.log
console.log("\n6. Property access in console.log:")
let data = {}
data.status = "ok"
try {
    console.log("Status: " + data.status)
} catch (e) {
    console.log("FAILED: " + e)
}

// Test 7: Try-catch block
console.log("\n7. Try-catch:")
try {
    console.log("In try block")
    throw new Error("test")
} catch (e) {
    console.log("Caught: " + e.message)
}

// Test 8: Function keyword in callback
console.log("\n8. function keyword in map:")
try {
    let doubled = map(nums, function(n) {
        return n * 2
    })
    console.log("SUCCESS: " + doubled)
} catch (e) {
    console.log("FAILED: " + e)
}